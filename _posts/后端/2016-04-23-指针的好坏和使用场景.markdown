---
layout: post
category: 后端
---

# 什么是指针

学C语言的人有一句话，你不会指针就不用说过学会C语言，可见C语言已经把指针作为一个最大的特性了，但是滥用指针，容易构成程序崩毁。指正是什么来呢？其实指针就像是其它变量一样，所不同的是一般的变量包含的是实际的真实的数据，而指针包含的是一个指向内存中某个位置的地址。

# 指针的好处

* 代码看起来整洁
* 性能快，对于大数据可以省内存
* 为函数提供修改调用变元的灵活手段

# 指针的坏处

* 设计不好容易找不到指针上的地址
* 业务逻辑不清楚，不知道值在哪里被修改了，哪里没有修改
* 如果程序要锁死变量，那么在并发过程中就会非常卡。

# 适合场景

* 封装库，数据单一简洁

# 使用方法 golang

```
//初始化一个指针
var p *int
fmt.Printf("p: %v\n", p)
//空指针，输出为nil p: <nil>

var i int
p = &i
fmt.Printf("p: %v,%v\n", p, *p)
//输出为 p: 0x10434130,0

//通过指针修改变量数值
*p = 8
//或者 i =8
fmt.Printf("p: %v,%v,%v\n", p, *p,i)
//输出为 p: 0x10434130,8,8
```

#踩过的坑

传了类型没有传指针，导致指针上的内容没有修改。
忘记那个坑怎么写了。。。


